pipeline:
  name: Yearbook Test Pipeline
  description: Example pipeline
  version: 1.0.0
model:
  id: YearbookNet
  config:
    num_input_channels: 1
    num_classes: 2
model_storage:
  full_model_strategy:
    name: PyTorchFullModel
training:
  gpus: 1
  device: cuda:0
  dataloader_workers: 2
  use_previous_model: true
  initial_model: random
  batch_size: 64
  optimizers:
  - name: default
    algorithm: SGD
    source: PyTorch
    param_groups:
    - module: model
      config:
        lr: 0.001
        momentum: 0.9
  optimization_criterion:
    name: CrossEntropyLoss
  checkpointing:
    activated: false
  selection_strategy:
    name: NewDataStrategy
    maximum_keys_in_memory: 1000
    config:
      storage_backend: database
      limit: -1
      reset_after_trigger: true
  seed: 42
  epochs_per_trigger: 10
data:
  dataset_id: yearbook_train
  transformations: []
  bytes_parser_function: |
    import torch
    import numpy as np
    def bytes_parser_function(data: bytes) -> torch.Tensor:
      return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
trigger:
  id: TimeTrigger
  trigger_config:
    trigger_every: 1d
evaluation:
  device: cuda:0
  result_writers:
  - json
  datasets:
  - dataset_id: yearbook_test_1930
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1931
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1932
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1933
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1934
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1935
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1936
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1937
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1938
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1939
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1940
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1941
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1942
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1943
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1944
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1945
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1946
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1947
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1948
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1949
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1950
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1951
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1952
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1953
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1954
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1955
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1956
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1957
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1958
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1959
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1960
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1961
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1962
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1963
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1964
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1965
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1966
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1967
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1968
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1969
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1970
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1971
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1972
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1973
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1974
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1975
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1976
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1977
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1978
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1979
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1980
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1981
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1982
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1983
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1984
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1985
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1986
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1987
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1988
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1989
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1990
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1991
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1992
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1993
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1994
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1995
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1996
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1997
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1998
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_1999
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2000
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2001
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2002
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2003
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2004
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2005
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2006
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2007
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2008
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2009
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2010
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2011
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2012
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
  - dataset_id: yearbook_test_2013
    bytes_parser_function: |
      import torch
      import numpy as np
      def bytes_parser_function(data: bytes) -> torch.Tensor:
        return torch.from_numpy(np.frombuffer(data, dtype=np.float32)).reshape(1, 32, 32)
    batch_size: 64
    dataloader_workers: 2
    metrics:
    - name: Accuracy
      evaluation_transformer_function: |
        import torch
        def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
          return torch.argmax(model_output, dim=-1)
