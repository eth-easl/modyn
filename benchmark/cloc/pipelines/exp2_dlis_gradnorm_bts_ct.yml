pipeline:
    name: exp2_dlis_gradnorm_bts_ct
    description: CLOC. do not reset model, train on DLIS GradNorm 25% of new data
    version: 1.0.0
model:
  id: ResNet50
  config:
    num_classes: 713
model_storage:
  full_model_strategy:
    name: "PyTorchFullModel"
training:
  gpus: 1
  device: "cuda:0"
  amp: False
  dataloader_workers: 16
  num_prefetched_partitions: 4
  parallel_prefetch_requests: 1
  use_previous_model: True
  initial_model: random
  initial_pass:
    activated: False
  batch_size: 512
  optimizers:
    - name: "default"
      algorithm: "SGD"
      source: "PyTorch"
      param_groups:
        - module: "model"
          config:
            lr: 0.025
            weight_decay: 0.0001
            momentum: 0.9
  optimization_criterion:
    name: "CrossEntropyLoss"
  checkpointing:
    activated: False
  selection_strategy:
    name: CoresetStrategy
    maximum_keys_in_memory: 100000
    config:
      storage_backend: "database"
      limit: -1
      reset_after_trigger: True
      downsampling_config:
        strategy: GradNormDownsamplingStrategy
        ratio: 25
        sample_then_batch: False
data:
  dataset_id: cloc
  transformations: ["transforms.RandomResizedCrop(224)",
                    "transforms.RandomHorizontalFlip()",
                    "transforms.ToTensor()",
                    "transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])"]
  bytes_parser_function: |
    from PIL import Image
    import io
    def bytes_parser_function(data: bytes) -> Image:
      return Image.open(io.BytesIO(data)).convert("RGB")
trigger:
  id: TimeTrigger
  trigger_config:
    trigger_every: "52w"
evaluation:
  device: "cuda:0"
  result_writers: ["json"]
  datasets:
    - dataset_id: cloc
      transformations: ["transforms.RandomResizedCrop(224)",
                        "transforms.RandomHorizontalFlip()",
                        "transforms.ToTensor()",
                        "transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])"]
      bytes_parser_function: |
        from PIL import Image
        import io
        def bytes_parser_function(data: bytes) -> Image:
          return Image.open(io.BytesIO(data)).convert("RGB")
      batch_size: 256
      dataloader_workers: 16
      metrics:
        - name: "Accuracy"
          evaluation_transformer_function: |
            import torch
            def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
              return torch.argmax(model_output, dim=-1)
        - name: "F1-score"
          config:
            num_classes: 713
            average: "macro"
          evaluation_transformer_function: |
            import torch
            def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
              return torch.argmax(model_output, dim=-1)
        - name: "WeightedF1-score"
          config:
            num_classes: 713
            average: "weighted"
          evaluation_transformer_function: |
            import torch
            def evaluation_transformer_function(model_output: torch.Tensor) -> torch.Tensor:
              return torch.argmax(model_output, dim=-1)

