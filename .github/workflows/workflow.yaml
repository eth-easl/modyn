name: Linting & Tests
on: [pull_request]

defaults:
  run:
    shell: bash

jobs:
  flake8:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Flake8
        run: |
          conda env create -f ./environment.yml
          conda run -n modyn pip install -r dev-requirements.txt
          conda run -n modyn flake8 --version
          conda run -n modyn flake8 --statistics

  mypy-typechecking:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Mypy
        run: |
          conda env create -f ./environment.yml
          conda run -n modyn pip install -r dev-requirements.txt
          conda run -n modyn mypy --version
          conda run -n modyn mypy modyn

  pylint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Pylint
        run: |
          conda env create -f ./environment.yml
          conda run -n modyn pip install -r dev-requirements.txt
          conda run -n modyn pylint --version
          conda run -n modyn pylint modyn

  unittests:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Pytest
        run: |
          conda env create -f ./environment.yml
          conda run -n modyn pip install -r dev-requirements.txt
          conda run -n modyn pytest
          conda run -n modyn pytest > pytest-coverage.txt

      - name: Comment coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2

# TODO(create issue): For every new module we want to fail below 90% coverage. Because I restrict this PR to supervisor, I do a custom
# Pytest call here. When everything has high coverage, we want to merge this action with the regular pytest action.
  coverage-newarchitecture:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Pytest
        run: |
          conda env create -f ./environment.yml
          conda run -n modyn pip install -r dev-requirements.txt
          conda run -n modyn pytest modyn --cov-reset --cache-clear --cov=modyn/backend/supervisor --cov-fail-under=90


# Checks whether the base container works correctly.
  dockerized-unittests:
      runs-on: ubuntu-latest
      
      steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup base container
        uses: ./.github/actions/base

      - name: Setup dev-requirements and run pytest within container
        run: docker run modyn conda run -n modyn bash -c "pip install -r dev-requirements.txt && echo Running pytest && pytest"

  integrationtests:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
