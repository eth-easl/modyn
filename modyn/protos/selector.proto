syntax = "proto3";

package selector;

service Selector {
  rpc register_pipeline(RegisterPipelineRequest) returns (PipelineResponse) {}
  rpc get_sample_keys_and_weights(GetSamplesRequest)
      returns (stream SamplesResponse) {}
  rpc inform_data(DataInformRequest) returns (Empty) {}
  rpc inform_data_and_trigger(DataInformRequest) returns (TriggerResponse) {}
  rpc get_number_of_samples(GetNumberOfSamplesRequest)
      returns (NumberOfSamplesResponse) {}
  rpc get_number_of_partitions(GetNumberOfPartitionsRequest)
      returns (NumberOfPartitionsResponse) {}
  rpc get_selection_strategy(GetSelectionStrategyRequest) returns (SelectionStrategyResponse) {}
}

message Empty {}

message JsonString { string value = 1; }

message DataInformRequest {
  int32 pipeline_id = 1;
  repeated int64 keys = 2;
  repeated int64 timestamps = 3;
  repeated int64 labels = 4;
}

message TriggerResponse { int32 trigger_id = 1; }

message RegisterPipelineRequest {
  int32 num_workers = 1;
  JsonString selection_strategy = 2;
}

message PipelineResponse { int32 pipeline_id = 1; }

message GetSamplesRequest {
  int32 pipeline_id = 1;
  int32 trigger_id = 2;
  int32 partition_id = 3;
  int32 worker_id = 4;
}

message SamplesResponse {
  repeated int64 training_samples_subset = 1;
  repeated float training_samples_weights = 2;
}

message GetNumberOfSamplesRequest {
  int32 pipeline_id = 1;
  int32 trigger_id = 2;
}

message NumberOfSamplesResponse { int32 num_samples = 1; }

message GetNumberOfPartitionsRequest {
  int32 pipeline_id = 1;
  int32 trigger_id = 2;
}

message NumberOfPartitionsResponse { int32 num_partitions = 1; }

message GetSelectionStrategyRequest {
    int32 pipeline_id = 1;
}

message SelectionStrategyResponse {
    bool downsampling_enabled = 1;
    string strategy_name = 2;
    JsonString params = 3;
}
