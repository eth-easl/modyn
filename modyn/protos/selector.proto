syntax = "proto3";

package selector;

service Selector {
  rpc register_pipeline(RegisterPipelineRequest) returns (PipelineResponse) {}
  rpc get_sample_keys_and_weights(GetSamplesRequest)
      returns (stream SamplesResponse) {}
  rpc inform_data(DataInformRequest) returns (DataInformResponse) {}
  rpc inform_data_and_trigger(DataInformRequest) returns (TriggerResponse) {}
  rpc get_number_of_samples(GetNumberOfSamplesRequest)
      returns (NumberOfSamplesResponse) {}
  rpc get_status_bar_scale(GetStatusBarScaleRequest)
      returns (StatusBarScaleResponse) {}
  rpc get_number_of_partitions(GetNumberOfPartitionsRequest)
      returns (NumberOfPartitionsResponse) {}
  rpc get_available_labels(GetAvailableLabelsRequest)
      returns (AvailableLabelsResponse) {}
  rpc get_selection_strategy(GetSelectionStrategyRequest)
      returns (SelectionStrategyResponse) {}
  rpc seed_selector(SeedSelectorRequest) returns (SeedSelectorResponse) {}
  rpc uses_weights(UsesWeightsRequest) returns (UsesWeightsResponse) {}
}

message Empty {}

message JsonString { string value = 1; }

message StrategyConfig {
  string name = 1;
  optional bool zip = 2;
  optional string zip_algorithm = 3;
  optional JsonString config = 4;
}

// TODO(#302): Remove this when reworking pipeline registration
message ModelStoragePolicyInfo {
  StrategyConfig full_model_strategy_config = 1;
  optional StrategyConfig incremental_model_strategy_config = 2;
  optional int32 full_model_interval = 3;
}

message DataInformRequest {
  int32 pipeline_id = 1;
  repeated int64 keys = 2;
  repeated int64 timestamps = 3;
  repeated int64 labels = 4;
}

message DataInformResponse { JsonString log = 1; }

message TriggerResponse {
  int32 trigger_id = 1;
  JsonString log = 2;
}

message RegisterPipelineRequest {
  int32 num_workers = 1;
  JsonString selection_strategy = 2;
  string model_class_name = 3;
  JsonString model_configuration = 4;
  bool amp = 5;
  ModelStoragePolicyInfo model_storage_policy = 6;
}

message PipelineResponse { int32 pipeline_id = 1; }

message GetSamplesRequest {
  int32 pipeline_id = 1;
  int32 trigger_id = 2;
  int32 partition_id = 3;
  int32 worker_id = 4;
}

message SamplesResponse {
  repeated int64 training_samples_subset = 1;
  repeated float training_samples_weights = 2;
}

message GetNumberOfSamplesRequest {
  int32 pipeline_id = 1;
  int32 trigger_id = 2;
}

message NumberOfSamplesResponse { int32 num_samples = 1; }

message GetStatusBarScaleRequest { int32 pipeline_id = 1; }

message StatusBarScaleResponse { int32 status_bar_scale = 1; }

message GetNumberOfPartitionsRequest {
  int32 pipeline_id = 1;
  int32 trigger_id = 2;
}

message NumberOfPartitionsResponse { int32 num_partitions = 1; }

message GetAvailableLabelsRequest { int32 pipeline_id = 1; }

message AvailableLabelsResponse { repeated int64 available_labels = 1; }

message GetSelectionStrategyRequest { int32 pipeline_id = 1; }

message SelectionStrategyResponse {
  bool downsampling_enabled = 1;
  string strategy_name = 2;
  JsonString downsampler_config = 3;
}

message UsesWeightsRequest { int32 pipeline_id = 1; }

message UsesWeightsResponse { bool uses_weights = 1; }

message SeedSelectorRequest { int32 seed = 1; }

message SeedSelectorResponse { bool success = 1; }
