syntax = "proto3";

package modyn.storage;

service Storage {
  rpc Get(GetRequest) returns (stream GetResponse) {}
  rpc GetNewDataSince(GetNewDataSinceRequest)
      returns (stream GetNewDataSinceResponse) {}
  rpc GetDataInInterval(GetDataInIntervalRequest)
      returns (stream GetDataInIntervalResponse) {}
  rpc GetDataPerWorker(GetDataPerWorkerRequest)
      returns (stream GetDataPerWorkerResponse) {}
  rpc GetDatasetSize(GetDatasetSizeRequest)
      returns (GetDatasetSizeResponse) {}
  rpc CheckAvailability(DatasetAvailableRequest)
      returns (DatasetAvailableResponse) {}
  rpc RegisterNewDataset(RegisterNewDatasetRequest)
      returns (RegisterNewDatasetResponse) {}
  rpc GetCurrentTimestamp(GetCurrentTimestampRequest)
      returns (GetCurrentTimestampResponse) {}
  rpc DeleteDataset(DatasetAvailableRequest) returns (DeleteDatasetResponse) {}
  rpc DeleteData(DeleteDataRequest) returns (DeleteDataResponse) {}
}

message GetRequest {
  string dataset_id = 1;
  repeated int64 keys = 2;
}

message GetResponse {
  repeated bytes samples = 1;
  repeated int64 keys = 2;
  repeated int64 labels = 3;
}

// https://github.com/grpc/grpc/issues/15937
message GetCurrentTimestampRequest {}

message GetNewDataSinceRequest {
  string dataset_id = 1;
  int64 timestamp = 2;
}

message GetNewDataSinceResponse {
  repeated int64 keys = 1;
  repeated int64 timestamps = 2;
  repeated int64 labels = 3;
}

message GetDataInIntervalRequest {
  string dataset_id = 1;
  int64 start_timestamp = 2;
  int64 end_timestamp = 3;
}

message GetDataInIntervalResponse {
  repeated int64 keys = 1;
  repeated int64 timestamps = 2;
  repeated int64 labels = 3;
}

message GetDataPerWorkerRequest {
  string dataset_id = 1;
  int32 worker_id = 2;
  int32 total_workers = 3;
  // value unset means no limit
  // start_timestamp is inclusive, end_timestamp is exclusive
  optional int64 start_timestamp = 4;
  optional int64 end_timestamp = 5;
}

message GetDataPerWorkerResponse {
  repeated int64 keys = 1;
}

message GetDatasetSizeRequest {
  string dataset_id = 1;
  // value unset means no limit
  // start_timestamp is inclusive, end_timestamp is exclusive
  optional int64 start_timestamp = 2;
  optional int64 end_timestamp = 3;
}

message GetDatasetSizeResponse {
  bool success = 1;
  int64 num_keys = 2;
}

message DatasetAvailableRequest { string dataset_id = 1; }

message DatasetAvailableResponse { bool available = 1; }

message RegisterNewDatasetRequest {
  string dataset_id = 1;
  string filesystem_wrapper_type = 2;
  string file_wrapper_type = 3;
  string description = 4;
  string base_path = 5;
  string version = 6;
  string file_wrapper_config = 7;
  bool ignore_last_timestamp = 8;
  int64 file_watcher_interval = 9;
}

message RegisterNewDatasetResponse { bool success = 1; }

message GetCurrentTimestampResponse { int64 timestamp = 1; }

message DeleteDatasetResponse { bool success = 1; }

message DeleteDataRequest {
  string dataset_id = 1;
  repeated int64 keys = 2;
}

message DeleteDataResponse { bool success = 1; }
