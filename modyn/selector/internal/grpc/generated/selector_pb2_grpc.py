# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import modyn.selector.internal.grpc.generated.selector_pb2 as selector__pb2


class SelectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register_pipeline = channel.unary_unary(
                '/selector.Selector/register_pipeline',
                request_serializer=selector__pb2.RegisterPipelineRequest.SerializeToString,
                response_deserializer=selector__pb2.PipelineResponse.FromString,
                )
        self.get_sample_keys_and_weights = channel.unary_stream(
                '/selector.Selector/get_sample_keys_and_weights',
                request_serializer=selector__pb2.GetSamplesRequest.SerializeToString,
                response_deserializer=selector__pb2.SamplesResponse.FromString,
                )
        self.inform_data = channel.unary_unary(
                '/selector.Selector/inform_data',
                request_serializer=selector__pb2.DataInformRequest.SerializeToString,
                response_deserializer=selector__pb2.Empty.FromString,
                )
        self.inform_data_and_trigger = channel.unary_unary(
                '/selector.Selector/inform_data_and_trigger',
                request_serializer=selector__pb2.DataInformRequest.SerializeToString,
                response_deserializer=selector__pb2.TriggerResponse.FromString,
                )
        self.get_number_of_samples = channel.unary_unary(
                '/selector.Selector/get_number_of_samples',
                request_serializer=selector__pb2.GetNumberOfSamplesRequest.SerializeToString,
                response_deserializer=selector__pb2.NumberOfSamplesResponse.FromString,
                )
        self.get_number_of_partitions = channel.unary_unary(
                '/selector.Selector/get_number_of_partitions',
                request_serializer=selector__pb2.GetNumberOfPartitionsRequest.SerializeToString,
                response_deserializer=selector__pb2.NumberOfPartitionsResponse.FromString,
                )


class SelectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register_pipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_sample_keys_and_weights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def inform_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def inform_data_and_trigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_number_of_samples(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_number_of_partitions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SelectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register_pipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.register_pipeline,
                    request_deserializer=selector__pb2.RegisterPipelineRequest.FromString,
                    response_serializer=selector__pb2.PipelineResponse.SerializeToString,
            ),
            'get_sample_keys_and_weights': grpc.unary_stream_rpc_method_handler(
                    servicer.get_sample_keys_and_weights,
                    request_deserializer=selector__pb2.GetSamplesRequest.FromString,
                    response_serializer=selector__pb2.SamplesResponse.SerializeToString,
            ),
            'inform_data': grpc.unary_unary_rpc_method_handler(
                    servicer.inform_data,
                    request_deserializer=selector__pb2.DataInformRequest.FromString,
                    response_serializer=selector__pb2.Empty.SerializeToString,
            ),
            'inform_data_and_trigger': grpc.unary_unary_rpc_method_handler(
                    servicer.inform_data_and_trigger,
                    request_deserializer=selector__pb2.DataInformRequest.FromString,
                    response_serializer=selector__pb2.TriggerResponse.SerializeToString,
            ),
            'get_number_of_samples': grpc.unary_unary_rpc_method_handler(
                    servicer.get_number_of_samples,
                    request_deserializer=selector__pb2.GetNumberOfSamplesRequest.FromString,
                    response_serializer=selector__pb2.NumberOfSamplesResponse.SerializeToString,
            ),
            'get_number_of_partitions': grpc.unary_unary_rpc_method_handler(
                    servicer.get_number_of_partitions,
                    request_deserializer=selector__pb2.GetNumberOfPartitionsRequest.FromString,
                    response_serializer=selector__pb2.NumberOfPartitionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'selector.Selector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Selector(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register_pipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/selector.Selector/register_pipeline',
            selector__pb2.RegisterPipelineRequest.SerializeToString,
            selector__pb2.PipelineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_sample_keys_and_weights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/selector.Selector/get_sample_keys_and_weights',
            selector__pb2.GetSamplesRequest.SerializeToString,
            selector__pb2.SamplesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def inform_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/selector.Selector/inform_data',
            selector__pb2.DataInformRequest.SerializeToString,
            selector__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def inform_data_and_trigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/selector.Selector/inform_data_and_trigger',
            selector__pb2.DataInformRequest.SerializeToString,
            selector__pb2.TriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_number_of_samples(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/selector.Selector/get_number_of_samples',
            selector__pb2.GetNumberOfSamplesRequest.SerializeToString,
            selector__pb2.NumberOfSamplesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_number_of_partitions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/selector.Selector/get_number_of_partitions',
            selector__pb2.GetNumberOfPartitionsRequest.SerializeToString,
            selector__pb2.NumberOfPartitionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
