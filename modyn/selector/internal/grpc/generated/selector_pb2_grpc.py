# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import warnings

import grpc
import modyn.selector.internal.grpc.generated.selector_pb2 as selector__pb2

GRPC_GENERATED_VERSION = "1.63.0"
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = "1.65.0"
SCHEDULED_RELEASE_DATE = "June 25, 2024"
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in selector_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
        + f" This warning will become an error in {EXPECTED_ERROR_RELEASE},"
        + f" scheduled for release on {SCHEDULED_RELEASE_DATE}.",
        RuntimeWarning,
    )


class SelectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_sample_keys_and_weights = channel.unary_stream(
            "/selector.Selector/get_sample_keys_and_weights",
            request_serializer=selector__pb2.GetSamplesRequest.SerializeToString,
            response_deserializer=selector__pb2.SamplesResponse.FromString,
            _registered_method=True,
        )
        self.inform_data = channel.unary_unary(
            "/selector.Selector/inform_data",
            request_serializer=selector__pb2.DataInformRequest.SerializeToString,
            response_deserializer=selector__pb2.DataInformResponse.FromString,
            _registered_method=True,
        )
        self.inform_data_and_trigger = channel.unary_unary(
            "/selector.Selector/inform_data_and_trigger",
            request_serializer=selector__pb2.DataInformRequest.SerializeToString,
            response_deserializer=selector__pb2.TriggerResponse.FromString,
            _registered_method=True,
        )
        self.get_number_of_samples = channel.unary_unary(
            "/selector.Selector/get_number_of_samples",
            request_serializer=selector__pb2.GetNumberOfSamplesRequest.SerializeToString,
            response_deserializer=selector__pb2.NumberOfSamplesResponse.FromString,
            _registered_method=True,
        )
        self.get_status_bar_scale = channel.unary_unary(
            "/selector.Selector/get_status_bar_scale",
            request_serializer=selector__pb2.GetStatusBarScaleRequest.SerializeToString,
            response_deserializer=selector__pb2.StatusBarScaleResponse.FromString,
            _registered_method=True,
        )
        self.get_number_of_partitions = channel.unary_unary(
            "/selector.Selector/get_number_of_partitions",
            request_serializer=selector__pb2.GetNumberOfPartitionsRequest.SerializeToString,
            response_deserializer=selector__pb2.NumberOfPartitionsResponse.FromString,
            _registered_method=True,
        )
        self.get_available_labels = channel.unary_unary(
            "/selector.Selector/get_available_labels",
            request_serializer=selector__pb2.GetAvailableLabelsRequest.SerializeToString,
            response_deserializer=selector__pb2.AvailableLabelsResponse.FromString,
            _registered_method=True,
        )
        self.get_selection_strategy = channel.unary_unary(
            "/selector.Selector/get_selection_strategy",
            request_serializer=selector__pb2.GetSelectionStrategyRequest.SerializeToString,
            response_deserializer=selector__pb2.SelectionStrategyResponse.FromString,
            _registered_method=True,
        )
        self.seed_selector = channel.unary_unary(
            "/selector.Selector/seed_selector",
            request_serializer=selector__pb2.SeedSelectorRequest.SerializeToString,
            response_deserializer=selector__pb2.SeedSelectorResponse.FromString,
            _registered_method=True,
        )
        self.uses_weights = channel.unary_unary(
            "/selector.Selector/uses_weights",
            request_serializer=selector__pb2.UsesWeightsRequest.SerializeToString,
            response_deserializer=selector__pb2.UsesWeightsResponse.FromString,
            _registered_method=True,
        )


class SelectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_sample_keys_and_weights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inform_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inform_data_and_trigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_number_of_samples(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_status_bar_scale(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_number_of_partitions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_available_labels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_selection_strategy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def seed_selector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def uses_weights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SelectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "get_sample_keys_and_weights": grpc.unary_stream_rpc_method_handler(
            servicer.get_sample_keys_and_weights,
            request_deserializer=selector__pb2.GetSamplesRequest.FromString,
            response_serializer=selector__pb2.SamplesResponse.SerializeToString,
        ),
        "inform_data": grpc.unary_unary_rpc_method_handler(
            servicer.inform_data,
            request_deserializer=selector__pb2.DataInformRequest.FromString,
            response_serializer=selector__pb2.DataInformResponse.SerializeToString,
        ),
        "inform_data_and_trigger": grpc.unary_unary_rpc_method_handler(
            servicer.inform_data_and_trigger,
            request_deserializer=selector__pb2.DataInformRequest.FromString,
            response_serializer=selector__pb2.TriggerResponse.SerializeToString,
        ),
        "get_number_of_samples": grpc.unary_unary_rpc_method_handler(
            servicer.get_number_of_samples,
            request_deserializer=selector__pb2.GetNumberOfSamplesRequest.FromString,
            response_serializer=selector__pb2.NumberOfSamplesResponse.SerializeToString,
        ),
        "get_status_bar_scale": grpc.unary_unary_rpc_method_handler(
            servicer.get_status_bar_scale,
            request_deserializer=selector__pb2.GetStatusBarScaleRequest.FromString,
            response_serializer=selector__pb2.StatusBarScaleResponse.SerializeToString,
        ),
        "get_number_of_partitions": grpc.unary_unary_rpc_method_handler(
            servicer.get_number_of_partitions,
            request_deserializer=selector__pb2.GetNumberOfPartitionsRequest.FromString,
            response_serializer=selector__pb2.NumberOfPartitionsResponse.SerializeToString,
        ),
        "get_available_labels": grpc.unary_unary_rpc_method_handler(
            servicer.get_available_labels,
            request_deserializer=selector__pb2.GetAvailableLabelsRequest.FromString,
            response_serializer=selector__pb2.AvailableLabelsResponse.SerializeToString,
        ),
        "get_selection_strategy": grpc.unary_unary_rpc_method_handler(
            servicer.get_selection_strategy,
            request_deserializer=selector__pb2.GetSelectionStrategyRequest.FromString,
            response_serializer=selector__pb2.SelectionStrategyResponse.SerializeToString,
        ),
        "seed_selector": grpc.unary_unary_rpc_method_handler(
            servicer.seed_selector,
            request_deserializer=selector__pb2.SeedSelectorRequest.FromString,
            response_serializer=selector__pb2.SeedSelectorResponse.SerializeToString,
        ),
        "uses_weights": grpc.unary_unary_rpc_method_handler(
            servicer.uses_weights,
            request_deserializer=selector__pb2.UsesWeightsRequest.FromString,
            response_serializer=selector__pb2.UsesWeightsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("selector.Selector", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Selector(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_sample_keys_and_weights(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/selector.Selector/get_sample_keys_and_weights",
            selector__pb2.GetSamplesRequest.SerializeToString,
            selector__pb2.SamplesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def inform_data(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/inform_data",
            selector__pb2.DataInformRequest.SerializeToString,
            selector__pb2.DataInformResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def inform_data_and_trigger(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/inform_data_and_trigger",
            selector__pb2.DataInformRequest.SerializeToString,
            selector__pb2.TriggerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_number_of_samples(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/get_number_of_samples",
            selector__pb2.GetNumberOfSamplesRequest.SerializeToString,
            selector__pb2.NumberOfSamplesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_status_bar_scale(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/get_status_bar_scale",
            selector__pb2.GetStatusBarScaleRequest.SerializeToString,
            selector__pb2.StatusBarScaleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_number_of_partitions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/get_number_of_partitions",
            selector__pb2.GetNumberOfPartitionsRequest.SerializeToString,
            selector__pb2.NumberOfPartitionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_available_labels(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/get_available_labels",
            selector__pb2.GetAvailableLabelsRequest.SerializeToString,
            selector__pb2.AvailableLabelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_selection_strategy(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/get_selection_strategy",
            selector__pb2.GetSelectionStrategyRequest.SerializeToString,
            selector__pb2.SelectionStrategyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def seed_selector(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/seed_selector",
            selector__pb2.SeedSelectorRequest.SerializeToString,
            selector__pb2.SeedSelectorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def uses_weights(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/selector.Selector/uses_weights",
            selector__pb2.UsesWeightsRequest.SerializeToString,
            selector__pb2.UsesWeightsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
