# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import warnings

import grpc
import modyn.evaluator.internal.grpc.generated.evaluator_pb2 as evaluator__pb2

GRPC_GENERATED_VERSION = "1.63.0"
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = "1.65.0"
SCHEDULED_RELEASE_DATE = "June 25, 2024"
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in evaluator_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
        + f" This warning will become an error in {EXPECTED_ERROR_RELEASE},"
        + f" scheduled for release on {SCHEDULED_RELEASE_DATE}.",
        RuntimeWarning,
    )


class EvaluatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.evaluate_model = channel.unary_unary(
            "/modyn.evaluator.Evaluator/evaluate_model",
            request_serializer=evaluator__pb2.EvaluateModelRequest.SerializeToString,
            response_deserializer=evaluator__pb2.EvaluateModelResponse.FromString,
            _registered_method=True,
        )
        self.get_evaluation_status = channel.unary_unary(
            "/modyn.evaluator.Evaluator/get_evaluation_status",
            request_serializer=evaluator__pb2.EvaluationStatusRequest.SerializeToString,
            response_deserializer=evaluator__pb2.EvaluationStatusResponse.FromString,
            _registered_method=True,
        )
        self.get_evaluation_result = channel.unary_unary(
            "/modyn.evaluator.Evaluator/get_evaluation_result",
            request_serializer=evaluator__pb2.EvaluationResultRequest.SerializeToString,
            response_deserializer=evaluator__pb2.EvaluationResultResponse.FromString,
            _registered_method=True,
        )
        self.cleanup_evaluations = channel.unary_unary(
            "/modyn.evaluator.Evaluator/cleanup_evaluations",
            request_serializer=evaluator__pb2.EvaluationCleanupRequest.SerializeToString,
            response_deserializer=evaluator__pb2.EvaluationCleanupResponse.FromString,
            _registered_method=True,
        )


class EvaluatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def evaluate_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_evaluation_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_evaluation_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def cleanup_evaluations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_EvaluatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "evaluate_model": grpc.unary_unary_rpc_method_handler(
            servicer.evaluate_model,
            request_deserializer=evaluator__pb2.EvaluateModelRequest.FromString,
            response_serializer=evaluator__pb2.EvaluateModelResponse.SerializeToString,
        ),
        "get_evaluation_status": grpc.unary_unary_rpc_method_handler(
            servicer.get_evaluation_status,
            request_deserializer=evaluator__pb2.EvaluationStatusRequest.FromString,
            response_serializer=evaluator__pb2.EvaluationStatusResponse.SerializeToString,
        ),
        "get_evaluation_result": grpc.unary_unary_rpc_method_handler(
            servicer.get_evaluation_result,
            request_deserializer=evaluator__pb2.EvaluationResultRequest.FromString,
            response_serializer=evaluator__pb2.EvaluationResultResponse.SerializeToString,
        ),
        "cleanup_evaluations": grpc.unary_unary_rpc_method_handler(
            servicer.cleanup_evaluations,
            request_deserializer=evaluator__pb2.EvaluationCleanupRequest.FromString,
            response_serializer=evaluator__pb2.EvaluationCleanupResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("modyn.evaluator.Evaluator", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Evaluator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def evaluate_model(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/modyn.evaluator.Evaluator/evaluate_model",
            evaluator__pb2.EvaluateModelRequest.SerializeToString,
            evaluator__pb2.EvaluateModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_evaluation_status(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/modyn.evaluator.Evaluator/get_evaluation_status",
            evaluator__pb2.EvaluationStatusRequest.SerializeToString,
            evaluator__pb2.EvaluationStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_evaluation_result(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/modyn.evaluator.Evaluator/get_evaluation_result",
            evaluator__pb2.EvaluationResultRequest.SerializeToString,
            evaluator__pb2.EvaluationResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def cleanup_evaluations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/modyn.evaluator.Evaluator/cleanup_evaluations",
            evaluator__pb2.EvaluationCleanupRequest.SerializeToString,
            evaluator__pb2.EvaluationCleanupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
